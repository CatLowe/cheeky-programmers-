binding_site <- function (protein, file_name) {
  if (missing(file_name))
    stop("binding_site: must supply file_name which includes file type as .pdb")
  library(bio3d)
  pdb <- read.pdb(protein)
  #identify binding site residues within the pdb file
  bs <-binding.site(pdb)
  #select the binding site residues from the pdb file and trim pdb file
  #in order to write a pdb file containing just the binding site
  inds <- atom.select (pdb, resno = bs$resno)
  pdb3 <- trim.pdb(pdb, inds)
  write.pdb(pdb3, file= file_name)
  #print a list of binding site residue names
  return (bs$resnames)
}


blast_limited <- function (protein, min = 50, max = 60){
  if (missing(protein))
    stop("blast: must supply 'pdb' object, i.e. a character string of 4")
  #Load protein --------------------------------------------
  pdb <- read.pdb(protein)
  blast_search <- blast.pdb(pdb)
  identity <- blast_search$hit.tbl$identity
  pdbid <- blast_search$hit.tbl$pdb.id
  result <- cbind(identity,pdbid)
  #limit the identity of returned blast searches to between 50-60%
  #this is so homologous sequences are selected instead of just
  #similar sequences. An evolutionary relationship is implied and of
  #interst to the function of this package
  limit <- subset(result,identity<=(max) & identity>=(min))
  pdb_ids <- limit[,c("pdbid")]
  number <- length(pdb_ids)
  # widen limit if sample size is too small -----------------------
  if (number > 5) {
    rdm <-sample(pdb_ids,5)
  } else {
    limit <- subset(result,identity<=(max + 5) & identity>=(min))
    pdb_ids <- limit[,c("pdbid")]
    rdm <- sample(pdb_ids,5)
  }
  # return data
  return (rdm)
}

blast_outputs <- function (rdm){
  if (missing(rdm))
    stop ("blast_output : need to input output from blast_limited function")
  no_chain <- gsub('.{2}$','',rdm)
  return (no_chain)
}

write_files <- function(no_chain, filename_1, filename_2, filename_3, filename_4, filename_5) {
  if (missing(filename_1))
    stop ("must inculde a file name in a character string")
  if (missing(filename_2))
    stop ("must inculde a file name in a character string")
  if (missing(filename_3))
    stop ("must inculde a file name in a character string")
  if (missing(filename_4))
    stop ("must inculde a file name in a character string")
  if (missing(filename_5))
    stop ("must inculde a file name in a character string")
  if (missing(no_chain))
    stop ("must inculde output from blast_outputs function")
  a<-no_chain[1]
  b<-no_chain[2]
  c<-no_chain[3]
  d<-no_chain[4]
  e<-no_chain[5]
  output_files1 <- read.pdb(a)
  output_files2 <- read.pdb(b)
  output_files3 <- read.pdb(c)
  output_files4 <- read.pdb(d)
  output_files5 <- read.pdb(e)
  output_file1 <- output_files1
  write.pdb(output_file1, file= filename_1)
  output_file2 <- output_files2
  write.pdb(output_file2, file= filename_2)
  output_file3 <- output_files3
  write.pdb(output_file3, file= filename_3)
  output_file4 <- output_files4
  write.pdb(output_file4, file= filename_4)
  output_file5 <- output_files5
  write.pdb(output_file5, file= filename_5)
  
  output_files<- lapply(no_chain, read.pdb)
  return (output_files)
}

write_bs <- function (output_files) {
  
  bs_1 <- lapply (output_files, binding.site)
  
  output_1 <- bs_1[[1]]
  bs_output_1 <- atom.select (output_files[[1]], resno= output_1$resno)
  pdb_output_1 <- trim.pdb(output_files[[1]], bs_output_1)
  write.pdb(pdb_output_1, file= "blast1_bindingsite.pdb")
  
  output_2 <- bs_1[[2]]
  bs_output_2 <- atom.select (output_files[[2]], resno= output_2$resno)
  pdb_output_2 <- trim.pdb(output_files[[2]], bs_output_2)
  write.pdb(pdb_output_2, file= "blast2_bindingsite.pdb")
  
  output_3 <- bs_1[[3]]
  bs_output_3 <- atom.select (output_files[[3]], resno= output_3$resno)
  pdb_output_3 <- trim.pdb(output_files[[3]], bs_output_3)
  write.pdb(pdb_output_3, file= "blast3_bindingsite.pdb")
  
  output_4 <- bs_1[[4]]
  bs_output_4 <- atom.select (output_files[[4]], resno= output_4$resno)
  pdb_output_4 <- trim.pdb(output_files[[4]], bs_output_4)
  write.pdb(pdb_output_4, file= "blast4_bindingsite.pdb")
  
  output_5 <- bs_1[[5]]
  bs_output_5 <- atom.select (output_files[[5]], resno= output_5$resno)
  pdb_output_5 <- trim.pdb(output_files[[5]], bs_output_5)
  write.pdb(pdb_output_5, file= "blast5_bindingsite.pdb")
  return (bs_1)
}

rmsd_matrix <- function (proteinchain, no_chain, rdm) {
  P <- proteinchain
  ids <- c(rdm, P)
  raw.files <- get.pdb(ids)
  files <- pdbsplit(raw.files, ids)
  pdbs <- pdbaln(files)
  pdbs$id <- basename.pdb(pdbs$id)
  seqidentity(pdbs)
  rmsdvalues <-rmsd(pdbs, fit = TRUE)
  rownames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5], "POI")
  colnames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5], "POI")
  return (rmsdvalues)
}

rmsdbs_matrix <- function (no_chain, file1, file2, file3, file4, file5, file6) {
  bsids <- c(file1, file2, file3, file4, file5, file6)
  raw.files_1 <- get.pdb(bsids)
  files_1 <- pdbsplit(raw.files_1, bsids)
  pdbs_1 <- pdbaln(bsids)
  pdbs_1$id <- basename.pdb(pdbs_1$id)
  seqidentity(pdbs_1)
  rmsdvaluesbs <-rmsd(pdbs_1, fit = TRUE)
  rownames(rmsdvaluesbs) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5], "POI")
  colnames(rmsdvaluesbs) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5],"POI")
  return (rmsdvaluesbs)
}

plot_rmsd <- function (rmsdvalues, rmsdvaluesbs, filepath_name, no_chain) {
  if (missing(rmsdvalues))
    stop ("rmsdvalues: must inculde numeric values")
  if (missing(rmsdvaluesbs))
    stop ("rmsdvaluesbs : must inculde numeric values")
  if (missing(filepath_name))
    stop ("must inculde a file path with filename in a character string")
  jpeg(file = filepath_name, width = 700)
  plot <- plot(rmsdvalues[6,1:5], rmsdvaluesbs[6,1:5],
               main= "Comparitive RMSD values of whole protein structure and binding site residues",
               xlab= "RMSD values for whole protein superposition (Å)",
               ylab= "RMSD values for binding site superposition (Å)",
               col= "orange", pch = 19, cex = 1, lty = "solid", lwd = 6)
  text(rmsdvalues[6,1:5], rmsdvaluesbs[6,1:5], labels= c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5]), cex= 0.7, col = "blue")
  dev.off()
  return (plot)
}

poi_align <- function(filename1, filename2,filename3,filename4,filename5,no_chain,pdb){
  pdb1<-read.pdb(pdb)
  a<-read.pdb(filename1)
  b<-read.pdb(filename2)
  c<-read.pdb(filename3)
  d<-read.pdb(filename4)
  e<-read.pdb(filename5)
  aln <- struct.aln(pdb1,a,write.pdbs=TRUE,outpath = no_chain[1],max.cycle=3)
  aln2 <- struct.aln(pdb1,b,write.pdbs=TRUE,outpath = no_chain[2],max.cycle=3)
  aln3 <- struct.aln(pdb1,c,write.pdbs=TRUE,outpath = no_chain[3],max.cycle=3)
  aln4 <- struct.aln(pdb1,d,write.pdbs=TRUE,outpath = no_chain[4],max.cycle=3)
  aln5 <- struct.aln(pdb1,e,write.pdbs=TRUE,outpath = no_chain[5],max.cycle=3)
  table <- data.frame(aln$rmsd,aln2$rmsd,aln3$rmsd,aln4$rmsd,aln5$rmsd)
  colnames(table) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4],no_chain[5])
  row.names(table) <-c("Initial","Mobile_1","Mobile_2","Mobile_3")
  table<-cbind(rownames(table),table)
  colnames(table)[1]<-"Cycle number"
  return(table)
}


GUI_HomologyCompare <- function (){

win <- gwindow(title = "Analysing PDB structures")
group <- ggroup(horizontal = FALSE, container=win)
label <- glabel("Type your PDB code here:", container=group)
pdbfileedit <- gedit(container=group)
label <- glabel("Input the PDB id with chain of your PDB file you would like to assess (e.g. 1A52_A) and press Go:", container=group)
userchainname <- gedit(container=group)

button <- gbutton( "Go", container=group, handler= function(h,...) {
  poi <- (svalue(pdbfileedit))

  poi_bindingsite <- binding_site(poi, "POIb.pdb")
  chainname <-(svalue(userchainname))

  #Giving the user the identified binding sites of their PDB file
  obj4 <- glabel("Identified binding site residues of your PDB file:",container = group)
  obj5 <- gcombobox(c(poi_bindingsite), container=group)
  obj5a<-glabel("Just a moment...", container=group)

  rdm <- blast_limited(poi)


  no_chain <- blast_outputs(rdm)


  #Giving the user the 5 directed random BLAST results of their PDB file
  obj6 <- glabel("BLAST results on your PDB file with an identity of 65<x>50 compared to your protein-of-interest:", container = group)
  obj7 <- glabel(c(no_chain), container=group)
  label1 <- glabel("Input file names and file type for your BLAST results which will be saved in your working directory (e.g. 1x76.pdb), then press Go:", container=group)
  innergroup0 <- ggroup(container = group)
  userfilename1 <- gedit(container=innergroup0)
  userfilename2 <- gedit(container=innergroup0)
  userfilename3 <- gedit(container=innergroup0)
  userfilename4 <- gedit(container=innergroup0)
  userfilename5 <- gedit(container=innergroup0)

  button1 <- gbutton ( "Go", container=group, handler=function(h,...){
    filename_1<-(svalue(userfilename1))
    filename_2<-(svalue(userfilename2))
    filename_3<-(svalue(userfilename3))
    filename_4<-(svalue(userfilename4))
    filename_5<-(svalue(userfilename5))

    obj7a<-glabel("...and another moment, patience is a virtue...", container=group)
    output_files <- write_files(no_chain, filename_1, filename_2, filename_3, filename_4, filename_5)
    bs_1 <- write_bs(output_files)

    innergroup1 <- ggroup(container = group)
    #Giving the user the identified binding sites of the BLAST results of their PDB file
    obj8 <- glabel("Identified binding site residues of", container = innergroup1)
    obj9<-glabel(no_chain[1], container=innergroup1)
    obj10 <- gcombobox(c(bs_1[[1]]$resnames), container=group)
    innergroup2 <- ggroup(container = group)
    obj11 <- glabel("Identified binding site residues of", container = innergroup2)
    obj12 <-glabel(no_chain[2], container=innergroup2)
    obj13 <- gcombobox(c(bs_1[[2]]$resnames), container=group)
    innergroup3 <- ggroup(container = group)
    obj14 <- glabel("Identified binding sites residues of", container = innergroup3)
    obj15 <-glabel(no_chain[3], container=innergroup3)
    obj16 <- gcombobox(c(bs_1[[3]]$resnames), container=group)
    innergroup4 <- ggroup(container = group)
    obj17 <- glabel("Identified binding site residues of", container = innergroup4)
    obj18 <-glabel(no_chain[4], container=innergroup4)
    obj19 <- gcombobox(c(bs_1[[4]]$resnames), container=group)
    innergroup5 <- ggroup(container = group)
    obj20 <- glabel("Identified binding site residues of", container = innergroup5)
    obj21<- glabel(no_chain[5], container=innergroup5)
    obj22 <- gcombobox(c(bs_1[[5]]$resnames), container=group)
    obj22a<-glabel("...and just one more moment...", container=group)


    chainname <-(svalue(userchainname))
    print (chainname)
    print (no_chain)
    print (rdm)
    rmsdvalues <- rmsd_matrix(proteinchain = chainname, no_chain, rdm)


    rmsdvaluesbs <- rmsdbs_matrix(no_chain, "blast1_bindingsite.pdb", "blast2_bindingsite.pdb", "blast3_bindingsite.pdb", "blast4_bindingsite.pdb", "blast5_bindingsite.pdb", "POIb.pdb")


    plot <- plot_rmsd(rmsdvalues, rmsdvaluesbs, filepath_name = "RMSDvaluesplot.jpeg" , no_chain)


    align_table <- poi_align(filename_1, filename_2, filename_3, filename_4, filename_5, no_chain, poi)

    newwin<-gwindow(title= "Table of RMSD values for your PDB file against BLAST searches")
    newgroup <- ggroup(horizontal = FALSE, container=newwin)
    obj23<-glabel("The root mean squared deviation (RMSD) values between your protein-of-interest and your BLAST results in cycles of superposition.", container=newgroup)
    obj25 <- gtable(align_table, index=TRUE, container = newgroup)
    obj24<-glabel("The RMSD values are calculated across the entire protein. These values were calculated in refinement cycles. Each cycle the protein atoms are fit together differently in order to give smaller RMSD values.", container=newgroup)
    obj26<-glabel("A graph showing the Comparitive RMSD values of whole protein structure and binding site residues has been stored locally. It can be found in your working directory.", container=newgroup)
    obj27<-glabel("Folders containing structure superpositions from each cycle for each protein can also be found in your working directory. These can be viewed using software such as Pymol or CCP4MG.", container=newgroup)

  })})
}

