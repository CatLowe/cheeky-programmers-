#requires gWidgets
#requires gWidgetstcltk in particular as this works better on Windows
install.packages("gWidgetstcltk")
library(gWidgetstcltk)
library(bio3d)

win <- gwindow(title = "Analysing PDB structures")
group <- ggroup(horizontal = FALSE, container=win)
label <- glabel("Type your PDB code here and press Go:", container=group)
innergroup <- ggroup(container = group)
edit <- gedit(container=innergroup)

button <- gbutton("Go", container=innergroup, handler=function(h, ...) {
  poi <- read.pdb(svalue(edit))
  print('### Trying to print poi inside function ###')
  print(poi)
  
  #use function binding.site to identify a binding site within loaded pdb file
  bs <- binding.site(poi)
  
  #use function print(bs$resnames) to print names of residues involved in indentified binding site
  print(bs$resnames) # residue names of identified binding site
  
  #Giving the user the identified binding sites of their PDB file
  obj4 <- glabel("Identified binding site residues of your PDB file:",container = group)
  obj5 <- gcombobox(c(bs$resnames), container=group)
  obj5a<-glabel("Just a moment...", container=group)
  
  
  #select the binding site and trim the pdb file to just the residues in the binding site
  inds <- atom.select (poi, resno = bs$resno)
  pdb3 <- trim.pdb( poi, inds)
  
  #write new pdb file
  write.pdb(pdb3, file= "1bzm_bindingsite.pdb")
  #blast search pdb file
  blast_search <- blast.pdb(pdb)
  print(blast_search$hit.tbl)
  #Select the columns of data that we are extracting from the blast search data
  identity <- blast_search$hit.tbl$identity
  pdbid <- blast_search$hit.tbl$pdb.id
  #bind the two columns of data together
  result <- cbind(identity,pdbid)
  result
  
  #Limit the identity of the blast search to be <=60 and >=50, and just print these
  limit <- subset(result,identity<=60 & identity>=50)
  limit
  pdb_ids <- limit[,c("pdbid")]
  aa<-rdm[1]
  bb<-rdm[2]
  cc<-rdm[3]
  dd<-rdm[4]
  ee<-rdm[5]
  
  #if function for if original limit produces too small a sample size, increase limit size
  number <- length(pdb_ids)
  if (number > 5) {
    rdm <-sample(pdb_ids,5)
  } else {
    limit <- subset(result,identity<=65 & identity>=50)
    pdb_ids <- limit[,c("pdbid")]
  }
  
  #Giving the user the 5 directed random BLAST results of their PDB file
  obj6 <- glabel("BLAST results on your PDB file with an identity of 65<x>50 compared to your protein-of-interest:", container = group)
  obj7 <- glabel(c(rdm), container=group)
  obj7a<-glabel("...and another moment, patience is a virtue...", container=group)
  
  #retrieve a random sample  of pdb files from limited selection
  #rdm <-sample(pdb_ids,4)
  #rdm
  #rewrite output to gain readable files
  no_chain <- gsub('.{2}$','',rdm)
  no_chain
  a<-no_chain[1]
  b<-no_chain[2]
  c<-no_chain[3]
  d<-no_chain[4]
  e<-no_chain[5]
  
  #read new files separate new files
  output_files <- lapply (no_chain, read.pdb)
  
  output_file1 <- output_files[[1]]
  write.pdb(output_file1, file= "blast1_wholeprotein.pdb")
  
  output_file2 <- output_files[[2]]
  write.pdb(output_file2, file= "blast2_wholeprotein.pdb")
  
  output_file3 <- output_files[[3]]
  write.pdb(output_file3, file= "blast3_wholeprotein.pdb")
  
  output_file4 <- output_files[[4]]
  write.pdb(output_file4, file= "blast4_wholeprotein.pdb")
  
  
  #find binding sites in new pdb files
  bs_1 <- lapply (output_files, binding.site)
  
  #edit pdb files for each output to create new selection of files
  output_1 <- bs_1[[1]]
  bs_output_1 <- atom.select (pdb, resno= output_1$resno)
  pdb_output_1 <- trim.pdb(pdb, bs_output_1)
  write.pdb(pdb_output_1, file= "blast1_bindingsite.pdb")
  
  output_2 <- bs_1[[2]]
  bs_output_2 <- atom.select (pdb, resno= output_2$resno)
  pdb_output_2 <- trim.pdb(pdb, bs_output_2)
  write.pdb(pdb_output_2, file= "blast2_bindingsite.pdb")
  
  output_3 <- bs_1[[3]]
  bs_output_3 <- atom.select (pdb, resno= output_3$resno)
  pdb_output_3 <- trim.pdb(pdb, bs_output_3)
  write.pdb(pdb_output_3, file= "blast3_bindingsite.pdb")
  
  output_4 <- bs_1[[4]]
  bs_output_4 <- atom.select (pdb, resno= output_4$resno)
  pdb_output_4 <- trim.pdb(pdb, bs_output_4)
  write.pdb(pdb_output_4, file= "blast4_bindingsite.pdb")
  
  output_5 <- bs_1[[5]]
  bs_output_5 <- atom.select (pdb, resno= output_5$resno)
  pdb_output_5 <- trim.pdb(pdb, bs_output_5)
  write.pdb(pdb_output_5, file= "blast5_bindingsite.pdb")
  
  innergroup1 <- ggroup(container = group)
  #Giving the user the identified binding sites of the BLAST results of their PDB file
  obj8 <- glabel("Identified binding site residues of", container = innergroup1)
  obj9<-glabel(aa, container=innergroup1)
  obj10 <- gcombobox(c(output_1$resnames), container=group)
  innergroup2 <- ggroup(container = group)
  obj11 <- glabel("Identified binding site residues of", container = innergroup2)
  obj12 <-glabel(bb, container=innergroup2)
  obj13 <- gcombobox(c(output_2$resnames), container=group)
  innergroup3 <- ggroup(container = group)
  obj14 <- glabel("Identified binding sites residues of", container = innergroup3)
  obj15 <-glabel(cc, container=innergroup3)
  obj16 <- gcombobox(c(output_3$resnames), container=group)
  innergroup4 <- ggroup(container = group)
  obj17 <- glabel("Identified binding site residues of", container = innergroup4)
  obj18 <-glabel(dd, container=innergroup4)
  obj19 <- gcombobox(c(output_4$resnames), container=group)
  innergroup5 <- ggroup(container = group)
  obj20 <- glabel("Identified binding site residues of", container = innergroup5)
  obj21<- glabel(ee, container=innergroup5)
  obj22 <- gcombobox(c(output_5$resnames), container=group)
  obj23 <- gtable(table, container = gwindow())
})
