#use function binding.resnames to get binding site resedue names from a protein
binding_site <- function (poi, filename_6) {
  if (missing(filename_6))
    stop("binding_site: must supply file_name which includes file type as .pdb")
  #identify binding site residues within the pdb file
  pdb<- read.pdb(poi)
  bs <-binding.site(pdb)
  #select the binding site residues from the pdb file and trim pdb file
  #in order to write a pdb file containing just the binding site
  inds <- atom.select (pdb, resno = bs$resno)
  pdb3 <- trim.pdb(pdb, inds)
  write.pdb(pdb3, file= filename_6)
  #print a list of binding site residue names
  return (bs$resnames)
}


blast_limited <- function (poi, min = 50, max = 60){
  if (missing(poi))
    stop("blast: must supply 'pdb' object, i.e. a character string of 4")
  library(bio3d)
  #Load protein --------------------------------------------
  pdb <- read.pdb(poi)
  blast_search <- blast.pdb(pdb)
  identity <- blast_search$hit.tbl$identity
  pdbid <- blast_search$hit.tbl$pdb.id
  result <- cbind(identity,pdbid)
  #limit the identity of returned blast searches to between 50-60%
  #this is so homologous sequences are selected instead of just
  #similar sequences. An evolutionary relationship is implied and of
  #interst to the function of this package
  limit <- subset(result,identity<=(max) & identity>=(min))
  pdb_ids <- limit[,c("pdbid")]
  number <- length(pdb_ids)
  # widen limit if sample size is too small -----------------------
  if (number > 5) {
    rdm <-sample(pdb_ids,5)
  } else {
    limit <- subset(result,identity<=(max + 5) & identity>=(min))
    pdb_ids <- limit[,c("pdbid")]
    rdm <- sample(pdb_ids,5)
  }
  # return data
  no_chain <- gsub('.{2}$','',rdm)
  return (no_chain)
}


write_files <- function (no_chain) {
  output_files <- lapply(no_chain, read.pdb)
  bs_1 <- lapply(output_files, binding.site)
  return (bs_1)
}

#obtaining a matrix of rmsd values and labelling
rmsd_matrix <- function (poi, no_chain, rdm) {
  P <- no_chain
  ids <- c(rdm, P)
  raw.files <- get.pdb(ids)
  files <- pdbsplit(raw.files, ids)
  pdbs <- pdbaln(files)
  pdbs$id <- basename.pdb(pdbs$id)
  seqidentity(pdbs)
  rmsdvalues <-rmsd(pdbs, fit = TRUE)
  rownames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5], "POI")
  colnames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5], "POI")
  return (rmsdvalues)
}

#obtaing RMSD values for binding site and labelling
rmsdbs_matrix <- function (no_chain, pdb) {
  pdb1 <- read.pdb (pdb)
  a<-no_chain[1]
  b<-no_chain[2]
  c<-no_chain[3]
  d<-no_chain[4]
  e<-no_chain[5]
  a1<-read.pdb(a)
  b1<-read.pdb(b)
  c1<-read.pdb(c)
  d1<-read.pdb(d)
  e1<-read.pdb(e)
  bsids <- c(a1, b1, c1, d1, e1, pdb1)
  raw.files_1 <- get.pdb(bsids)
  files_1 <- pdbsplit(raw.files_1, bsids)
  pdbs_1 <- pdbaln(bsids)
  pdbs_1$id <- basename.pdb(pdbs_1$id)
  seqidentity(pdbs_1)
  rmsdvaluesbs <-rmsd(pdbs_1, fit = TRUE)
  rownames(rmsdvaluesbs) <-c(a, b, c, d,e, "POI")
  colnames(rmsdvaluesbs) <-c(a, b,c,d,e,"POI")
  return (rmsdvaluesbs)
}

plot_rmsd <- function (rmsdvalues, rmsdvaluesbs, filepath_name) {
  if (missing(rmsdvalues))
    stop ("rmsdvalues: must inculde numeric values")
  if (missing(rmsdvaluesbs))
    stop ("rmsdvaluesbs : must inculde numeric values")
  if (missing(filepath_name))
    stop ("must inculde a file path with filename in a character string")
  jpeg(file = filepath_name, width = 700)
  plot <- plot(rmsdvalues[6,1:5], rmsdvaluesbs[6,1:5],
               main= "Comparitive RMSD values of whole protein structure and binding site residues",
               xlab= "RMSD values for whole protein superposition (Å)",
               ylab= "RMSD values for binding site superposition (Å)",
               col= "orange", pch = 19, cex = 1, lty = "solid", lwd = 6)
  text(rmsdvalues[6,1:5], rmsdvaluesbs[6,1:5], labels= c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5]), cex= 0.7, col = "blue")
  dev.off()
  return (plot)
}

poi_align <- function(no_chain,pdb){
  pdb1 <- read.pdb (pdb)
  a<-no_chain[1]
  b<-no_chain[2]
  c<-no_chain[3]
  d<-no_chain[4]
  e<-no_chain[5]
  a1<-read.pdb(a)
  b1<-read.pdb(b)
  c1<-read.pdb(c)
  d1<-read.pdb(d)
  e1<-read.pdb(e)
  aln <- struct.aln(pdb1,a1,write.pdbs=TRUE,outpath = no_chain[1],max.cycle=3)
  aln2 <- struct.aln(pdb1,b1,write.pdbs=TRUE,outpath = no_chain[2],max.cycle=3)
  aln3 <- struct.aln(pdb1,c1,write.pdbs=TRUE,outpath = no_chain[3],max.cycle=3)
  aln4 <- struct.aln(pdb1,d1,write.pdbs=TRUE,outpath = no_chain[4],max.cycle=3)
  aln5 <- struct.aln(pdb1,e1,write.pdbs=TRUE,outpath = no_chain[5],max.cycle=3)
  table <- data.frame(aln$rmsd,aln2$rmsd,aln3$rmsd,aln4$rmsd,aln5$rmsd)
  colnames(table) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4],no_chain[5])
  row.names(table) <-c("Initial","Mobile_1","Mobile_2","Mobile_3")
  return(table)
}


getrdm <- function (protein, min = 50, max = 60) {
  pdb <- read.pdb(protein)
  blast_search <- blast.pdb(pdb)
  identity <- blast_search$hit.tbl$identity
  pdbid <- blast_search$hit.tbl$pdb.id
  result <- cbind(identity,pdbid)
  limit <- subset(result,identity<=(max) & identity>=(min))
  pdb_ids <- limit[,c("pdbid")]
  number <- length(pdb_ids)
  # widen limit if sample size is too small -----------------------
  if (number > 5) {
    rdm <-sample(pdb_ids,5)
  } else {
    limit <- subset(result,identity<=(max + 5) & identity>=(min))
    pdb_ids <- limit[,c("pdbid")]
    rdm <- sample(pdb_ids,5)
  }
  return (rdm)
}

save_files <- function (no_chain, filename1, filename2, filename3, filename4, filename5) {
  a<-no_chain[1]
  b<-no_chain[2]
  c<-no_chain[3]
  d<-no_chain[4]
  e<-no_chain[5]
  output_files1 <- read.pdb(a)
  output_files2 <- read.pdb(b)
  output_files3 <- read.pdb(c)
  output_files4 <- read.pdb(d)
  output_files5 <- read.pdb(e)
  
  output_files <- lapply(no_chain, read.pdb) 
  
  output_file1 <- output_files[[1]]
  write.pdb(output_file1, file= filename_1)
  output_file2 <- output_files[[2]]
  write.pdb(output_file2, file= filename_2)
  output_file3 <- output_files[[3]]
  write.pdb(output_file3, file= filename_3)
  output_file4 <- output_files[[4]]
  write.pdb(output_file4, file= filename_4)
  output_file5 <- output_files[[5]]
  write.pdb(output_file5, file= filename_5)
}

bindingsites_res <- function (no_chain) {
  
  output_files <- lapply(no_chain, read.pdb)
  bs_1 <- lapply (output_files, binding.site)
  
  output_1 <- bs_1[[1]]
  bs_output_1 <- atom.select (output_files[[1]], resno= output_1$resno)
  pdb_output_1 <- trim.pdb(output_files[[1]], bs_output_1)
  write.pdb(pdb_output_1, file= "(blast1_bindingsite.pdb")
  
  output_2 <- bs_1[[2]]
  bs_output_2 <- atom.select (output_files[[2]], resno= output_2$resno)
  pdb_output_2 <- trim.pdb(output_files[[2]], bs_output_2)
  write.pdb(pdb_output_2, file= "blast2_bindingsite.pdb")
  
  output_3 <- bs_1[[3]]
  bs_output_3 <- atom.select (output_files[[3]], resno= output_3$resno)
  pdb_output_3 <- trim.pdb(output_files[[3]], bs_output_3)
  write.pdb(pdb_output_3, file= "blast3_bindingsite.pdb")
  
  output_4 <- bs_1[[4]]
  bs_output_4 <- atom.select (output_files[[4]], resno= output_4$resno)
  pdb_output_4 <- trim.pdb(output_files[[4]], bs_output_4)
  write.pdb(pdb_output_4, file= "blast4_bindingsite.pdb")
  
  output_5 <- bs_1[[5]]
  bs_output_5 <- atom.select (output_files[[5]], resno= output_5$resno)
  pdb_output_5 <- trim.pdb(output_files[[5]], bs_output_5)
  write.pdb(pdb_output_5, file= "blast5_bindingsite.pdb")
  return (bs_1)
}
