# require bio3d package
install.packages(bio3d)
#use function read.pdb to read a pdb file
pdb <- read.pdb("1a52") # read G-protein structure

#use function binding.site to identify a binding site within loaded pdb file
bs <- binding.site(pdb)

#use function print(bs$resnames) to print names of residues involved in indentified binding site
print(bs$resnames) # residue names of identified binding site

#Examples
pdb <- read.pdb("1a52")
bs <- binding.site(pdb)
print(bs$resnames)

pdb_1 <- read.pdb("1pph")
bs_a <- binding.site(pdb_1)
print(bs_a$resnames)

pdb_2 <- read.pdb("3dfr")
bs_b <- binding.site(pdb_2)
print(bs$resnames)

#select the binding site and trim the pdb file to just the residues in the binding site
inds <- atom.select (pdb, resno = bs$resno)
pdb3 <- trim.pdb(pdb, inds)

#write new pdb file
write.pdb(pdb3, file= "1bzm_bindingsite.pdb")

#blast search pdb file
blast_search <- blast.pdb(pdb)
print(blast_search$hit.tbl)
#Select the columns of data that we are extracting from the blast search data
identity <- blast_search$hit.tbl$identity
pdbid <- blast_search$hit.tbl$pdb.id
#bind the two columns of data together
result <- cbind(identity,pdbid)
result

#Limit the identity of the blast search to be <=60 and >=50, and just print these
limit <- subset(result,identity<=60 & identity>=50)
limit
pdb_ids <- limit[,c("pdbid")]

#if function for if original limit produces too small a sample size, increase limit size
number <- length(pdb_ids)
if (number > 5) {
  rdm <-sample(pdb_ids,5)
} else {
  limit <- subset(result,identity<=65 & identity>=50)
  pdb_ids <- limit[,c("pdbid")]
}

#retrieve a random sample  of pdb files from limited selection
#rdm <-sample(pdb_ids,4)
#rdm
#rewrite output to gain readable files
no_chain <- gsub('.{2}$','',rdm)
no_chain
a<-no_chain[1]
b<-no_chain[2]
c<-no_chain[3]
d<-no_chain[4]
e<-no_chain[5]

#read new files separate new files 
output_files <- lapply (no_chain, read.pdb)

output_file1 <- output_files[[1]]
write.pdb(output_file1, file= "blast1_wholeprotein.pdb")

output_file2 <- output_files[[2]]
write.pdb(output_file2, file= "blast2_wholeprotein.pdb")

output_file3 <- output_files[[3]]
write.pdb(output_file3, file= "blast3_wholeprotein.pdb")

output_file4 <- output_files[[4]]
write.pdb(output_file4, file= "blast4_wholeprotein.pdb")


#find binding sites in new pdb files
bs_1 <- lapply (output_files, binding.site)

#edit pdb files for each output to create new selection of files
output_1 <- bs_1[[1]]
bs_output_1 <- atom.select (pdb, resno= output_1$resno)
pdb_output_1 <- trim.pdb(pdb, bs_output_1)
write.pdb(pdb_output_1, file= "blast1_bindingsite.pdb")

output_2 <- bs_1[[2]]
bs_output_2 <- atom.select (pdb, resno= output_2$resno)
pdb_output_2 <- trim.pdb(pdb, bs_output_2)
write.pdb(pdb_output_2, file= "blast2_bindingsite.pdb")

output_3 <- bs_1[[3]]
bs_output_3 <- atom.select (pdb, resno= output_3$resno)
pdb_output_3 <- trim.pdb(pdb, bs_output_3)
write.pdb(pdb_output_3, file= "blast3_bindingsite.pdb")

output_4 <- bs_1[[4]]
bs_output_4 <- atom.select (pdb, resno= output_4$resno)
pdb_output_4 <- trim.pdb(pdb, bs_output_4)
write.pdb(pdb_output_4, file= "blast4_bindingsite.pdb")

output_5 <- bs_1[[5]]
bs_output_5 <- atom.select (pdb, resno= output_5$resno)
pdb_output_5 <- trim.pdb(pdb, bs_output_5)
write.pdb(pdb_output_5, file= "blast5_bindingsite.pdb")

#alternative
#a<-read.pdb("blast1_wholeprotein.pdb")
#b<-read.pdb("blast2_wholeprotein.pdb")
#c<-read.pdb("blast3_wholeprotein.pdb")
#d<-read.pdb("blast4_wholeprotein.pdb")
#e<-read.pdb("blast5_wholeprotein.pdb")
#aln<-struct.aln(a, c)

#obtaining a matrix of rmsd values and labelling 
raw.files <- get.pdb(rdm)
files <- pdbsplit(raw.files, rdm)
pdbs <- pdbaln(files)
pdbs$id <- basename.pdb(pdbs$id)
seqidentity(pdbs)
rmsdvalues <-rmsd(pdbs, fit = TRUE)
rownames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5])
colnames(rmsdvalues) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5])
rmsdvalues

#obtaing RMSD values for binding site and labelling
bsids<- c("blast1_bindingsite.pdb","blast2_bindingsite.pdb","blast3_bindingsite.pdb","blast4_bindingsite.pdb","blast5_bindingsite.pdb")
raw.files <- get.pdb(bsids)
files <- pdbsplit(raw.files, bsids)
pdbs <- pdbaln(bsids)
pdbs$id <- basename.pdb(pdbs$id)
seqidentity(pdbs)
rmsdvaluesbs <-rmsd(, fit = TRUE) 
rmsdvaluesbs <-rmsd(pdbs, fit = TRUE)
rmsdvaluesbs
rownames(rmsdvaluesbs) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5])
colnames(rmsdvaluesbs) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4], no_chain[5])
rmsdvaluesbs


aln <- struct.aln(pdb,a,write.pdbs=TRUE,outpath = "blast1input",max.cycle=4)
aln2 <- struct.aln(pdb,b,write.pdbs=TRUE,outpath = "blast2input",max.cycle=4)
aln3 <- struct.aln(pdb,c,write.pdbs=TRUE,outpath = "blast3input",max.cycle=4)
aln4 <- struct.aln(pdb,d,write.pdbs=TRUE,outpath = "blast4input",max.cycle=4)
aln5 <- struct.aln(pdb,e,write.pdbs=TRUE,outpath = "blast5input",max.cycle=4)
table <- data.frame(aln$rmsd,aln2$rmsd, aln3$rmsd, aln4$rmsd)
table
colnames(table) <-c(no_chain[1], no_chain[2],no_chain[3], no_chain[4],no_chain[5])
row.names(table) <-c("Mobile_1","Mobile_2","Mobile_3","Mobile_4","Mobile_5")
table
